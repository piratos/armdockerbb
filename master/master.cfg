# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import vars

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
# Basic config
c['buildbotNetUsageData'] = None
c['title'] = "CI buildbot/docker on ARM"
c['titleURL'] = "https://github.com/piratos/armdockerbb"
c['protocols'] = {'pb': {'port': 9989}}
####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []
c['workers'].append(worker.DockerLatentWorker(vars.WORKERNAME, vars.WORKERPASSWORD,
                        docker_host='unix://var/run/docker.sock',
                        image='dockerbb',
                        masterFQDN=vars.IP,
                        followStartupLogs=True))
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/buildbot/hello-world.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                name="hello_hapi",
                change_filter=util.ChangeFilter(project='piratos/hello_hapi', branch='master'),
                treeStableTimer=3,
                builderNames=["nmp"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                name="tox-example",
                change_filter=util.ChangeFilter(project='piratos/tox-example', branch='master'),
                treeStableTimer=3,
                builderNames=["py"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# Build Factories
npm_f = util.BuildFactory()
npm_f.addStep(steps.GitHub(repourl='git://github.com/piratos/hello_hapi.git', mode='full', method='clobber'))
npm_f.addStep(steps.ShellCommand(command=["npm", "install"]))
npm_f.addStep(steps.ShellCommand(command=["npm", "test"]))

py_f = util.BuildFactory()
py_f.addStep(steps.GitHub(repourl='git://github.com/piratos/tox-example.git', mode='full', method='clobber'))
py_f.addStep(steps.ShellCommand(command=["tox", "-e py27"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="nmp",
                       workernames=["npm-docker-worker"],
                       factory=npm_f))
c['builders'].append(
    util.BuilderConfig(name="py",
                       workernames=["npm-docker-worker"],
                       factory=py_f))
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# 'services' is a list of BuildbotService items like reporter targets. The
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').


# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = vars.URL

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
c['www']['authz'] = util.Authz(
        allowRules = [
                util.AnyEndpointMatcher(role="admins")
        ],
        roleMatchers = [
                util.RolesFromUsername(roles=['admins'], usernames=[vars.ADMINUSERNAME])
        ]
)
c['www']['auth'] = util.UserPasswordAuth({vars.ADMINUSERNAME: vars.ADMINPASSWORD})
# GitHub webhook receiver
c['www']['change_hook_dialects'] = {
        'github': {
                'secret': vars.SECRET,
                'strict': True,
        }
}
####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
